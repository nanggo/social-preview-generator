// Test with real image data
const fs = require('fs');
const path = require('path');
const { validateImageBuffer } = require('./dist/utils/image-security');

// Create minimal valid image buffers
function createValidJPEG() {
  // Minimal valid JPEG - 1x1 pixel black
  return Buffer.from([
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
    0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08,
    0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
    0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20,
    0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27,
    0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
    0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x14,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0xFF, 0xC4, 0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02,
    0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x6A, 0xFF, 0xD9
  ]);
}

function createValidPNG() {
  // Minimal valid PNG - 1x1 pixel transparent
  return Buffer.from([
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0x15, 0xC4,
    0x89, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x63, 0x60, 0x00, 0x02, 0x00,
    0x00, 0x05, 0x00, 0x01, 0xE2, 0x26, 0x05, 0x9B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44,
    0xAE, 0x42, 0x60, 0x82
  ]);
}

async function testWithRealImages() {
  console.log('üß™ Testing hybrid validation with real image data...\n');
  
  const testCases = [
    {
      name: 'Real JPEG (1x1px)',
      buffer: createValidJPEG(),
      shouldPass: true
    },
    {
      name: 'Real PNG (1x1px)',
      buffer: createValidPNG(),
      shouldPass: true
    },
    {
      name: 'Invalid binary data',
      buffer: Buffer.from([0x00, 0x01, 0x02, 0x03, ...Array(100).fill(0xFF)]),
      shouldPass: false
    },
    {
      name: 'Empty buffer',
      buffer: Buffer.alloc(0),
      shouldPass: false
    },
    {
      name: 'Partial JPEG header (corrupted)',
      buffer: Buffer.from([0xFF, 0xD8, 0x00, 0x00]),
      shouldPass: false
    }
  ];

  let passed = 0;
  let failed = 0;

  for (const testCase of testCases) {
    try {
      await validateImageBuffer(testCase.buffer, false);
      
      if (testCase.shouldPass) {
        console.log(`‚úÖ ${testCase.name}: PASS (correctly accepted)`);
        passed++;
      } else {
        console.log(`‚ùå ${testCase.name}: FAIL (should have been rejected)`);
        failed++;
      }
    } catch (error) {
      if (!testCase.shouldPass) {
        console.log(`‚úÖ ${testCase.name}: PASS (correctly rejected)`);
        console.log(`   Reason: ${error.message.slice(0, 100)}...`);
        passed++;
      } else {
        console.log(`‚ùå ${testCase.name}: FAIL (should have been accepted)`);
        console.log(`   Error: ${error.message}`);
        failed++;
      }
    }
  }

  console.log(`\nüìä Results: ${passed} passed, ${failed} failed`);
  
  return failed === 0;
}

async function testFallbackBehavior() {
  console.log('\nüîÑ Testing fallback behavior specifically...\n');
  
  // Test that file-type fails and magic bytes works
  const jpegBuffer = createValidJPEG();
  
  try {
    await validateImageBuffer(jpegBuffer, false);
    console.log('‚úÖ Validation succeeded (either file-type or fallback worked)');
  } catch (error) {
    console.log(`‚ùå Both file-type and fallback failed: ${error.message}`);
    return false;
  }
  
  return true;
}

async function runAllTests() {
  try {
    const realImageTests = await testWithRealImages();
    const fallbackTests = await testFallbackBehavior();
    
    if (realImageTests && fallbackTests) {
      console.log('\nüéâ All hybrid validation tests passed!');
    } else {
      console.log('\n‚ö†Ô∏è  Some tests failed.');
      process.exit(1);
    }
  } catch (error) {
    console.error('Test error:', error);
    process.exit(1);
  }
}

runAllTests();